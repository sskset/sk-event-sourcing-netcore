name: Build, Pack, and Release .NET Library

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.x' # Use the specific version of .NET you need

    - name: Restore dependencies
      run: dotnet restore SK.EventSourcing.Package.sln

    - name: Build
      run: dotnet build SK.EventSourcing.Package.sln --configuration Release --no-restore
    
    - name: Test
      run: dotnet test SK.EventSourcing.Package.sln

    - name: Pack
      run: dotnet pack SK.EventSourcing.Package.sln --configuration Release --no-build --output ./nupkg

    - name: Upload NuGet package as artifact
      uses: actions/upload-artifact@v3
      with:
        name: nuget-package
        path: ./nupkg/*.nupkg

    - name: Install GitHub CLI
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt-get update
        sudo apt-get install gh -y

    - name: Check if release exists
      id: check_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/$TAG_NAME --jq '.id' || echo 'null')
        echo "release_id=$RELEASE_ID" >> $GITHUB_ENV

    - name: Create GitHub Release
      if: env.release_id == 'null'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        gh release create $TAG_NAME ./nupkg/*.nupkg --title "Release $TAG_NAME" --notes "Automated release for $TAG_NAME"

    - name: Update GitHub Release
      if: env.release_id != 'null'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        TAG_NAME=${GITHUB_REF#refs/tags/}
        RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/$TAG_NAME --jq '.id')
        gh release upload $RELEASE_ID ./nupkg/*.nupkg --clobber

    - name: Publish to GitHub Packages
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PACKAGES_TOKEN }}
      run: |
        dotnet nuget add source --username ${{ github.actor }} --password $GITHUB_TOKEN --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"
        dotnet nuget push "./nupkg/*.nupkg" --source github

    - name: Upload package to GitHub Release
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.check_release.outputs.upload_url }}
        asset_path: ./nupkg/*.nupkg
        asset_name: sk-eventsourcing-${{ github.ref_name }}.nupkg
        asset_content_type: application/zip
